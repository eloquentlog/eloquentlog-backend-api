stages:
  - verify
  - test
  - build
  - deploy

.diesel:
  - &diesel
    if [ ! -d ".diesel" ]; then
      mkdir .diesel;
      make setup:tool;
      cp /usr/local/cargo/bin/diesel .diesel/diesel;
    else
      cp .diesel/diesel /usr/local/cargo/bin/diesel;
    fi

.postgresql:
  - &postgresql
    # /usr/include/postgresql is symlink to postgresql-11
    if [ ! -d ".postgresql" ]; then
      mkdir .postgresql;
      USE="readline ssl zlib uuid -perl -python"
        emerge --quiet-build=y --nospinner --oneshot dev-db/postgresql:11;
      cp -R /usr/include/postgresql-11/ .postgresql/include;
      cp -R /usr/lib64/postgresql-11/ .postgresql/lib;
      cp -R /usr/share/postgresql-11/ .postgresql/share;
      cp /usr/lib64/postgresql-11/bin/psql .postgresql/psql;
    else
      cp .postgresql/psql /usr/bin/psql;
      cp -R .postgresql/share/ /usr/share/postgresql-11;
      cp -R .postgresql/include/ /usr/include/postgresql-11;
      ln -s /usr/include/postgresql /usr/include/postgresql-11;
      ln -s /usr/include/libpq /usr/include/postgresql-11/libpq;
      cp -R .postgresql/lib/ /usr/lib64/postgresql-11;
      ln -s /usr/lib64/postgresql /usr/lib64/postgresql-11/lib64;
      ln -s /usr/lib64/postgresql-11/lib64/libecpg_compat.so /usr/lib64/libecpg_compat.so;
      ln -s /usr/lib64/postgresql-11/lib64/libecpg.so /usr/lib64/libecpg.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpgtypes.so /usr/lib64/libpgtypes.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpq.so /usr/lib64/libpq.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpq.so.5 /usr/lib64/libpq.so.5;
      rm -fr /etc/ld.so.cache;
      ldconfig;
    fi

.python:
  - &python
    if [ ! -d ".python" ]; then
      mkdir -p .python/{include,lib/pkgconfig,lib64};
      USE="readline sqlite ssl xml"
        emerge --quiet-build=y --nospinner --oneshot dev-lang/python:2.7;
      cp -R /usr/include/python2.7/ .python/include;
      cp -R /usr/lib/python-exec/ .python/lib/python-exec;
      cp /usr/bin/python2.7 .python/python2.7;
    else
      cp -R .python/include/ /user/include/python2.7;
      cp -R .python/lib64/ /usr/lib64/python2.7;
      cp -R .python/lib/python-exec/ /user/lib/python-exec;
      rm -fr /etc/ld.so.cache;
      ldconfig;
    fi

.sqlite:
  - &sqlite
    if [ ! -d ".sqlite" ]; then
      mkdir -p .sqlite/{include,lib/pkgconfig};
      USE="readline secure-delete"
        emerge --quiet-build=y --nospinner --oneshot dev-db/sqlite:3;
      cp -R /usr/include/sqlite3ext.h .sqlite/include/;
      cp -R /usr/include/sqlite3.h .sqlite/include/;
      cp -R /usr/lib64/libsqlite* .sqlite/lib/;
      cp -R /usr/lib64/pkgconfig/sqlite3.pc .sqlite/lib/pkgconfig/;
      cp /usr/bin/sqlite3 .sqlite/sqlite3;
    else
      cp -R .sqlite/sqlite3 /usr/bin/sqlite3;
      cp -R .sqlite/lib/pkgconfig/* /usr/lib64/pkgconfig/;
      cp -R .sqlite/lib/libsqlite* /usr/lib64/;
      cp -R .sqlite/include/* /usr/include/;
      rm -fr /etc/ld.so.cache;
      ldconfig;
    fi

.cloud-sdk:
  - &cloud-sdk
    export CLOUDSDK_PYTHON=python2.7;
    mkdir -p .tool;
    cd .tool;
    if [ ! -d "../.cloud-sdk" ]; then
      mkdir -p ../.cloud-sdk;
      curl -O $CLOUD_SDK_BASE_URL/$CLOUD_SDK_FILENAME;
      echo "${CLOUD_SDK_CHECKSUM}" "" ./$CLOUD_SDK_FILENAME | sha256sum -c -;
      cp $CLOUD_SDK_FILENAME ../.cloud-sdk/;
    else
      cp ../.cloud-sdk/$CLOUD_SDK_FILENAME .;
    fi;
    tar zxf $CLOUD_SDK_FILENAME;
    ./$CLOUD_SDK_ARTIFACT/install.sh
      --command-completion=false
      --path-update=false
      --usage-reporting=false
      --rc-path=/dev/null
      --override-components beta cloud-build-local core
      --quiet >$CLOUD_SDK_ARTIFACT/install.log 2>&1;
    cd ../

.vendor:
  - &vendor
    if [ ! -d "vendor" ]; then
      make setup:vendor;
    fi

.cache: &cache
  cache:
    key:
      files:
        - Cargo.lock
      # NOTE: set an environment variable `CI_CACHE_VERSION`
      prefix: "${CI_PROJECT_NAME}-cache-${CI_CACHE_VERSION}"
    paths:
      - .diesel
      - .cargo
      - .postgresql
      - vendor

.vet-tools: &vet-tools
  image: registry.gitlab.com/grauwoelfchen/portolan/rust-vet-tools:1.42.0-nightly
  except:
    - tags

.rust: &rust
  image: registry.gitlab.com/grauwoelfchen/portolan/rust:1.42.0-nightly
  before_script:
    - *postgresql
    - rustc --version
    - cargo --version
    - *vendor
  <<: *cache

.gentoo: &gentoo
  image: registry.gitlab.com/grauwoelfchen/portolan/gentoo-amd64-nomultilib:latest
  <<: *cache

# verify {{{
check:
  stage: verify
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
  script:
    - make verify:check

format:
  stage: verify
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - cargo fmt --version
  script:
    - make verify:format

lint:
  stage: verify
  <<: *vet-tools
  before_script:
    - *postgresql
    - rustc --version
    - cargo --version
    - cargo clippy --version
    - *vendor
  script:
    - mkdir .git/hooks
    - make verify:lint
  <<: *cache
# }}}

# test {{{
test:
  stage: test
  <<: *vet-tools
  services:
    - postgres:11.2
    - redis:5.0
  variables:
    ENV: test
    # superuser
    POSTGRES_DB: eloquentlog_test
    POSTGRES_USER: eloquentlog
    POSTGRES_PASSWORD: eloquentlog
    TEST_APPLICATION_URL: "http://127.0.0.1:3000"
    TEST_AUTHENTICATION_TOKEN_ISSUER: "test-authentication-token-issuer"
    TEST_AUTHENTICATION_TOKEN_KEY_ID: "test-authentication-token-key_id"
    TEST_AUTHENTICATION_TOKEN_SECRET: "test-authentication-token-secret"
    TEST_COOKIE_DOMAIN: "127.0.0.1"
    TEST_COOKIE_SECURE: "false"
    TEST_DATABASE_URL: "postgresql://eloquentlog:eloquentlog@postgres:5432/eloquentlog_test"
    TEST_MAILER_DOMAIN: "example.com"
    TEST_MAILER_FROM_EMAIL: "no-reply@example.com"
    TEST_MAILER_FROM_ALIAS: "Eloquentlog - Testing"
    TEST_MAILER_SMTP_HOST: "server.tld"
    TEST_MAILER_SMTP_PORT: 587
    TEST_MAILER_SMTP_PASSWORD: "username"
    TEST_MAILER_SMTP_USERNAME: "password"
    TEST_MESSAGE_QUEUE_URL: "redis://redis:6379/0"
    TEST_SESSION_STORE_URL: "redis://redis:6379/2"
    TEST_VERIFICATION_TOKEN_ISSUER: "test-verification-token-issuer"
    TEST_VERIFICATION_TOKEN_KEY_ID: "test-verification-token-key_id"
    TEST_VERIFICATION_TOKEN_SECRET: "test-verification-token-secret"
  before_script:
    - mkdir -p .git/hooks
    - *postgresql
    - rustc --version
    - cargo --version
    - kcov --version
    - *diesel
    - *vendor
    - psql $TEST_DATABASE_URL -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\""
    - DATABASE_URL=$TEST_DATABASE_URL make schema:migration:commit
    - DATABASE_URL=$TEST_DATABASE_URL make schema:migration:status
  script:
    - KCOV_PATH=/usr/bin/kcov make coverage
  after_script:
    - cat target/coverage/index.json
  <<: *cache
# }}}

# build {{{
build-debug:
  stage: build
  <<: *rust
  script:
    - make build:debug
  only:
    - master

build-release:
  stage: build
  <<: *rust
  script:
    - make build:release
  only:
    - release@eloquentlog/eloquentlog-console-api
    - tags@eloquentlog/eloquentlog-console-api
# }}}

# deploy {{{
release:
  stage: deploy
  <<: *gentoo
  variables:
    CLOUD_SDK_BASE_URL: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads
    CLOUD_SDK_CHECKSUM: 4773911e9f8fb7fe3b915e1f24ebe957436474253688820a9f2990d7399bd3b8
    CLOUD_SDK_ARTIFACT: google-cloud-sdk
    CLOUD_SDK_FILENAME: ${CLOUD_SDK_ARTIFACT}-301.0.0-linux-x86_64.tar.gz
    # set as secret variables
    # GCP_CLOUD_BUILD_CREDENTIAL_JSON: /path/to/credential.json
    # GCP_CLOUD_BUILD_SUBSTR_ENV_VARS: /path/to/.env.deploy
    # GCP_CLOUD_RUN_SERVICE_NAME_BASE: eloquentlog-console-api
    # GCP_CLOUD_SQL_POSTGRES_INSTANCE: foo-bar-baz-qux-quux
    # GCP_CLOUD_STORAGE_LOG_DIRECTORY: bucket_name
    # GCP_CLOUD_MEMORYSTORE_CONNECTOR: connector-name
    # GCP_PROJECT_ID: eloquentlog
  before_script:
    - *sqlite
    - *python
    - *cloud-sdk
  # TODO
  # environment:
  #   name: development
  script:
    - . .tool/$CLOUD_SDK_ARTIFACT/path.bash.inc; make deploy:server
  only:
    - release@eloquentlog/eloquentlog-console-api
    - tags@eloquentlog/eloquentlog-console-api
  # DEBUG
  # arfitacts:
  #   paths:
  #     - $CLOUD_SDK_ARTIFACT
  #   expire_in: 1 day
  cache:
    key: release
    paths:
      - .cloud-sdk
      - .python
      - .sqlite
# }}}
